{"version":3,"sources":["ValleyScene/background.png","EntranceScene/background.png","shared/HoundHeader.js","shared/Common.js","shared/StoryScene.js","shared/Quiz.js","ValleyScene/index.js","EntranceScene/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HoundHeaderWrapper","styled","header","_templateObject","HoundHeading","h1","_templateObject2","HoundSubHeading","h2","_templateObject3","HoundHeader","props","react_default","a","createElement","SceneWrapper","main","Common_templateObject","TextBox","Common_templateObject2","Backdrop","div","Common_templateObject3","SubSceneDiv","StoryScene_templateObject","StoryScene","_this","_this2","this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","SubScene","name","state","subscene","children","Common_SceneWrapper","onClick","changeSubSceneEvent","ChangeScene","react_router","push","to","changeSubScene","sceneName","setState","nextScene","decideNextSubScene","currentScene","console","log","Component","QuizBox","Quiz_templateObject","Question","span","Quiz_templateObject2","Quiz","React","Children","map","child","next","cloneElement","e","stopPropagation","onAnswer","correct","Choice","button","Quiz_templateObject3","Background","ValleyScene_templateObject","BackgroundImage","ValleyScene","handleQuizAnswer","isCorrect","Quiz_Quiz","EntranceScene_templateObject","BaseTextBox","EntranceScene_templateObject2","EntranceScene","EntranceScene_Background","EntranceScene_TextBox","Screen","App_templateObject","App","react_router_dom","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cc16c24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.286f7ba8.png\";","module.exports = __webpack_public_path__ + \"static/media/background.b0562802.png\";","import React from 'react';\nimport styled from 'styled-components';\n\nconst HoundHeaderWrapper = styled.header`\nbackground: #222;\ncolor: #EEE;\nmargin-top: 0px;\npadding: 20px;\ndisplay: flex;\nflex-direction: row;\njustify-content: space-between;\nalign-items: baseline;\nflex-flow: wrap;\n`;\n\nconst HoundHeading = styled.h1`\nmargin: 0px;\nfont-size: 2.5em;\ndisplay: inline-block;\npadding-right: 50px;\n`;\n\nconst HoundSubHeading = styled.h2`\nmargin: 0px;\nfont-size: 1.5em;\ndisplay: inline-block;\n`;\n\nexport default function (props) {\n    return (\n        <HoundHeaderWrapper>\n            <HoundHeading>Houndville</HoundHeading>\n            <HoundSubHeading>It's a dogs life...</HoundSubHeading>\n        </HoundHeaderWrapper>\n    );\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nexport const SceneWrapper = styled.main`\n    background: #cfa7a7;\n    flex: 1 1 auto;\n    position: relative;\n\n    > * {\n        position: relative;\n        z-index: 10;\n    }\n`;\n\nexport const TextBox = styled.p`\n    display: inline-block;\n    background: rgba(255, 255, 255, 0.8);\n    border: 3px solid #333;\n    border-radius: 10px;\n    padding: 20px;\n    position: absolute;\n    top: 2vh;\n    left: 5vw;\n    font-size: 1.5em;\n    max-width: 70%;\n`;\n\nexport const Backdrop = styled.div`\n    background: url('replace-me.png') no-repeat center center fixed;\n    background-size: cover;\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    z-index: 0;\n`;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Redirect } from 'react-router-dom';\n\nimport { SceneWrapper as CommonSceneWrapper } from './Common';\n\nconst SubSceneDiv = styled.div`\n    width: 100%;\n    height: 100%;\n`;\n\n//  Story scene is based on a set of subscenes\n\nexport default class StoryScene extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            subscene: 'init'\n        }\n    } \n\n    SubScene = (props) => {\n        if (props.name !== this.state.subscene) { return null;}\n        return <SubSceneDiv>{props.children}</SubSceneDiv>;\n    }\n\n    SceneWrapper = (props) => {\n        return (\n            <CommonSceneWrapper onClick={this.changeSubSceneEvent}>\n                {props.children}\n            </CommonSceneWrapper>\n        );\n    }\n\n    ChangeScene = (props) => {\n        return (\n            <this.SubScene name={props.name}>\n                <Redirect push to={'/' + props.to} />\n            </this.SubScene>\n        );\n    }\n\n    changeSubScene = (sceneName) => {\n        this.setState({\n            subscene: sceneName\n        });\n    }\n\n    changeSubSceneEvent = () => {\n        const nextScene = this.decideNextSubScene(this.state.subscene);\n        this.changeSubScene(nextScene);\n    }\n\n    decideNextSubScene(currentScene) {\n        console.log('To be overridden');\n    }\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport { TextBox } from '../shared/Common';\n\nconst QuizBox = styled(TextBox)`\n    background: rgba(142, 153, 231, 0.8);\n    color: white;\n`;\n\nexport const Question = styled.span``;\n\nexport const Quiz = (props) => \n    <QuizBox>\n        {React.Children.map(props.children, (child) => {\n            if (child.props.next) {\n                return React.cloneElement(child, { onClick: (e) => {\n                    e.stopPropagation();\n                    props.onAnswer(child.props.next, child.props.correct);\n                }});\n            }\n            return child;\n        })}\n    </QuizBox>;\n\nexport const Choice = styled.button`\n    background: none;\n    border: 3px solid transparent;\n    font-size: inherit;\n    color: inherit;\n    padding: 10px;\n    width: 99%;\n    margin: 10px auto;\n    &:hover {\n        border: 3px solid white;\n    }\n`;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport StoryScene from '../shared/StoryScene';\nimport { TextBox, Backdrop } from '../shared/Common';\nimport { Quiz, Question, Choice } from '../shared/Quiz';\nimport BackgroundImage from './background.png';\n\nconst Background = styled(Backdrop)`\n    background-image: url(${BackgroundImage});\n`;\n\nexport default class ValleyScene extends StoryScene {\n\n    decideNextSubScene(currentScene) {\n        switch(currentScene) {\n            case 'init': return 'tantalizing';\n            case 'tantalizing' : return 'head-down';\n            case 'head-down': return 'quiz-gate-name';\n            case 'quiz-gate-name' : return 'quiz-gate-name';\n            case 'quiz-drawbridge' : return 'over-the-bridge';\n            case 'quiz-moat' :\n            case 'quiz-portcullis' :\n                return 'quiz-gate-name';\n            case 'over-the-bridge' : return 'next-scene';\n            default: return 'init';\n        }\n    }\n\n    handleQuizAnswer = (next, isCorrect) => {\n        this.changeSubScene(next);\n    }\n\n    render() {\n        const { SubScene, SceneWrapper, ChangeScene } = this;\n        return (\n            <SceneWrapper>\n                <Background />\n                <SubScene name=\"init\">\n                    <TextBox>\n                        As you reach the top of the hill, Houndville appears beneath you\n                        in the next valley\n                    </TextBox>\n                </SubScene>\n\n                <SubScene name=\"tantalizing\">\n                    <TextBox>\n                        For some reason it seems a tantalizing place\n                    </TextBox>\n                </SubScene>\n\n                <SubScene name=\"head-down\">\n                    <TextBox>\n                        You head down towards a bridge. As you get closer you\n                        can see a special kind of gate\n                    </TextBox>\n                </SubScene>\n\n                <SubScene name=\"quiz-gate-name\">\n                    <Quiz onAnswer={this.handleQuizAnswer}>\n                        <Question>What is the name of a gate that drops down \n                            over water?</Question>\n                        <Choice next=\"quiz-drawbridge\">Drawbridge</Choice>\n                        <Choice next=\"quiz-moat\">Moat</Choice>\n                        <Choice next=\"quiz-portcullis\">Portcullis</Choice>\n                    </Quiz>\n                </SubScene>\n\n                <SubScene name=\"quiz-drawbridge\">\n                    <TextBox>\n                        Correct! It's called this because it has to be drawn up by\n                        chains to close it\n                    </TextBox>\n                </SubScene>\n\n                <SubScene name=\"quiz-moat\">\n                    <TextBox>\n                        Sorry, that's wrong. The moat is the name for the water\n                        surrounding a fortification\n                    </TextBox>\n                </SubScene>\n\n                <SubScene name=\"quiz-portcullis\">\n                    <TextBox>\n                        Sorry, that's wrong. A portcullis is a gate that comes down\n                        from above, usually from the ceiling of a gatehouse entrance\n                    </TextBox>\n                </SubScene>\n\n                <SubScene name=\"over-the-bridge\">\n                    <TextBox>\n                        You go over the bridge and stand before the drawbridge...\n                    </TextBox>\n                </SubScene>\n\n                <ChangeScene name=\"next-scene\" to=\"entrance\" />\n            </SceneWrapper>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport StoryScene from '../shared/StoryScene';\nimport { TextBox as BaseTextBox, Backdrop } from '../shared/Common';\nimport { Quiz, Question, Choice } from '../shared/Quiz';\nimport BackgroundImage from './background.png';\n\nconst Background = styled(Backdrop)`\n    background-image: url(${BackgroundImage});\n`;\n\nconst TextBox = styled(BaseTextBox)`\n    top: auto;\n    bottom: 2vh;\n`;\n\nexport default class EntranceScene extends StoryScene {\n\n    decideNextSubScene(currentScene) {\n        switch(currentScene) {\n            default: return 'init';\n        }\n    }\n\n    render() {\n        const { SubScene, SceneWrapper } = this;\n        return (\n            <SceneWrapper>\n                <Background />\n                <SubScene name=\"init\">\n                    <TextBox>\n                        I can't believe it, no one is guarding the entrance\n                    </TextBox>\n                </SubScene>\n            </SceneWrapper>\n        );\n    }\n}\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport HoundHeader from './shared/HoundHeader';\nimport ValleyScene from './ValleyScene';\nimport EntranceScene from './EntranceScene';\n\nconst Screen = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\nfunction App() {\n  return (\n    <Screen>\n      <HoundHeader />\n      <HashRouter>\n          <Switch>\n            <Route exact path=\"/\" component={ValleyScene} />\n            <Route exact path=\"/entrance\" component={EntranceScene} />\n          </Switch>\n        </HashRouter>\n    </Screen>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}